type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | INCREMENT
  | DECREMENT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | FORCE
  | QUEST
  | OF
  | IS
  | ASSIGN
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVIDEASSIGN
  | MODASSIGN
  | FORCEASSIGN
  | FUN
  | TYPE
  | IMPORT
  | PRINT
  | RAISE
  | BREAK
  | RETURN
  | TRY
  | CATCH
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | IN
  | MATCH
  | WHEN
  | SEMI
  | COLON
  | COMMA
  | PERIOD
  | VERT
  | NEWLINE
  | UNDER
  | EOF
  | STRING of (string)
  | INT of (int)
  | DOUBLE of (float)
  | CHAR of (char)
  | BOOL of (bool)
  | ID of (string)
  | OPTID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Ast
# 72 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACK *);
  262 (* RBRACK *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* MOD *);
  268 (* INCREMENT *);
  269 (* DECREMENT *);
  270 (* LT *);
  271 (* GT *);
  272 (* LEQ *);
  273 (* GEQ *);
  274 (* EQ *);
  275 (* NEQ *);
  276 (* AND *);
  277 (* OR *);
  278 (* FORCE *);
  279 (* QUEST *);
  280 (* OF *);
  281 (* IS *);
  282 (* ASSIGN *);
  283 (* PLUSASSIGN *);
  284 (* MINUSASSIGN *);
  285 (* TIMESASSIGN *);
  286 (* DIVIDEASSIGN *);
  287 (* MODASSIGN *);
  288 (* FORCEASSIGN *);
  289 (* FUN *);
  290 (* TYPE *);
  291 (* IMPORT *);
  292 (* PRINT *);
  293 (* RAISE *);
  294 (* BREAK *);
  295 (* RETURN *);
  296 (* TRY *);
  297 (* CATCH *);
  298 (* IF *);
  299 (* ELIF *);
  300 (* ELSE *);
  301 (* FOR *);
  302 (* WHILE *);
  303 (* IN *);
  304 (* MATCH *);
  305 (* WHEN *);
  306 (* SEMI *);
  307 (* COLON *);
  308 (* COMMA *);
  309 (* PERIOD *);
  310 (* VERT *);
  311 (* NEWLINE *);
  312 (* UNDER *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  313 (* STRING *);
  314 (* INT *);
  315 (* DOUBLE *);
  316 (* CHAR *);
  317 (* BOOL *);
  318 (* ID *);
  319 (* OPTID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\004\000\
\004\000\008\000\005\000\005\000\009\000\010\000\010\000\010\000\
\006\000\006\000\013\000\013\000\014\000\014\000\015\000\015\000\
\015\000\015\000\007\000\007\000\011\000\011\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\018\000\018\000\020\000\
\020\000\020\000\020\000\019\000\019\000\019\000\022\000\022\000\
\017\000\017\000\023\000\023\000\023\000\023\000\023\000\024\000\
\024\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\026\000\026\000\026\000\021\000\021\000\028\000\
\028\000\029\000\029\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\030\000\030\000\030\000\030\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\001\000\002\000\006\000\000\000\001\000\003\000\
\001\000\002\000\007\000\004\000\001\000\003\000\001\000\003\000\
\004\000\006\000\001\000\002\000\002\000\003\000\002\000\001\000\
\003\000\003\000\003\000\002\000\005\000\009\000\007\000\006\000\
\007\000\005\000\005\000\006\000\001\000\002\000\004\000\004\000\
\001\000\006\000\003\000\005\000\006\000\002\000\001\000\003\000\
\005\000\002\000\002\000\002\000\002\000\002\000\001\000\000\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\003\000\
\002\000\002\000\003\000\004\000\005\000\006\000\002\000\002\000\
\002\000\003\000\001\000\001\000\001\000\003\000\003\000\003\000\
\004\000\004\000\005\000\001\000\001\000\001\000\001\000\001\000\
\002\000\003\000\003\000\003\000\003\000\003\000\005\000\005\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\101\000\112\000\108\000\
\109\000\110\000\111\000\099\000\100\000\121\000\000\000\000\000\
\004\000\005\000\006\000\007\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\003\000\009\000\
\012\000\000\000\000\000\095\000\096\000\097\000\000\000\089\000\
\090\000\018\000\028\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\113\000\000\000\098\000\000\000\088\000\116\000\
\000\000\000\000\000\000\030\000\114\000\115\000\000\000\000\000\
\033\000\035\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\073\000\074\000\075\000\
\076\000\077\000\078\000\071\000\072\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\065\000\056\000\103\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\092\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\057\000\000\000\
\000\000\000\000\000\000\037\000\000\000\105\000\000\000\093\000\
\000\000\000\000\000\000\120\000\119\000\013\000\016\000\000\000\
\000\000\000\000\022\000\029\000\000\000\000\000\044\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\107\000\094\000\
\019\000\025\000\000\000\000\000\054\000\039\000\000\000\000\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\026\000\000\000\038\000\000\000\047\000\000\000\000\000\
\053\000\050\000"

let yydgoto = "\002\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\171\000\039\000\040\000\041\000\175\000\176\000\042\000\
\043\000\228\000\223\000\229\000\050\000\051\000\044\000\113\000\
\114\000\045\000\046\000\088\000\089\000\059\000"

let yysindex = "\017\000\
\020\255\000\000\180\003\193\002\013\001\013\001\013\001\013\001\
\216\254\219\254\229\254\180\003\180\003\251\254\180\003\005\001\
\047\255\045\001\051\255\068\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\125\000\020\255\
\000\000\000\000\000\000\000\000\096\255\103\255\000\000\134\255\
\106\255\096\003\087\255\064\003\000\000\000\000\171\255\188\003\
\032\255\139\255\140\255\091\255\000\000\094\255\097\255\145\255\
\235\254\149\255\151\255\134\255\134\255\134\255\134\255\156\255\
\133\255\000\000\110\255\112\255\000\000\113\255\120\255\064\003\
\180\003\180\003\014\255\180\003\180\003\000\000\000\000\000\000\
\000\000\109\003\180\003\000\000\000\000\000\000\012\255\000\000\
\000\000\000\000\000\000\000\000\188\003\188\003\188\003\188\003\
\188\003\188\003\188\003\188\003\188\003\188\003\188\003\188\003\
\188\003\188\003\188\003\188\003\188\003\188\003\188\003\188\003\
\000\000\064\003\000\000\115\255\000\000\180\003\000\000\000\000\
\243\254\180\003\180\003\000\000\000\000\000\000\013\001\013\255\
\000\000\000\000\000\000\180\003\119\255\174\255\111\255\061\255\
\180\003\176\255\178\255\000\000\179\255\180\255\180\003\181\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\255\
\136\255\137\255\193\255\116\255\020\255\011\255\000\000\142\255\
\198\255\180\003\198\255\180\003\180\003\203\255\198\255\205\255\
\000\000\204\255\208\255\172\003\052\255\052\255\198\255\013\001\
\209\255\020\255\013\001\150\255\001\003\000\000\000\000\071\255\
\215\255\169\255\198\255\000\000\013\001\000\000\167\255\000\000\
\219\255\094\255\097\255\000\000\000\000\000\000\000\000\150\255\
\218\255\019\255\000\000\000\000\224\255\198\255\000\000\198\255\
\180\003\000\000\202\255\222\255\198\255\234\255\000\000\000\000\
\000\000\000\000\020\255\180\003\000\000\000\000\236\255\109\003\
\180\003\000\000\182\255\235\255\239\255\198\255\240\255\000\000\
\013\001\000\000\198\255\000\000\194\255\000\000\071\255\180\003\
\000\000\000\000"

let yyrindex = "\000\000\
\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\213\001\020\002\000\000\144\004\
\083\002\166\000\000\000\035\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\251\003\127\000\042\004\092\004\000\000\
\243\255\000\000\000\000\195\004\246\004\041\005\092\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\199\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\148\255\000\000\130\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\247\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\138\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\255\
\248\255\020\000\000\000\023\000\029\000\190\000\000\000\253\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\247\255\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\087\001\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\128\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\251\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\150\001\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\227\255\000\000\220\000\007\001\015\001\005\000\000\000\
\000\000\152\000\250\255\255\255\000\000\080\255\000\000\000\000\
\145\003\103\000\106\000\000\000\146\255\004\000\252\255\230\255\
\000\000\253\255\000\000\177\000\157\000\186\255"

let yytablesize = 1726
let yytable = "\052\000\
\104\000\002\000\079\000\060\000\061\000\062\000\063\000\058\000\
\056\000\071\000\167\000\072\000\143\000\194\000\082\000\173\000\
\075\000\001\000\083\000\219\000\003\000\064\000\004\000\083\000\
\065\000\084\000\085\000\005\000\092\000\066\000\118\000\006\000\
\007\000\117\000\195\000\086\000\064\000\064\000\064\000\233\000\
\064\000\008\000\022\000\072\000\069\000\133\000\091\000\073\000\
\028\000\029\000\058\000\076\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\016\000\137\000\017\000\117\000\106\000\
\018\000\019\000\087\000\020\000\077\000\021\000\052\000\087\000\
\135\000\144\000\174\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\118\000\064\000\141\000\064\000\165\000\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\210\000\211\000\181\000\082\000\
\118\000\221\000\222\000\083\000\082\000\168\000\212\000\213\000\
\083\000\166\000\084\000\085\000\078\000\172\000\029\000\084\000\
\085\000\247\000\011\000\055\000\086\000\055\000\082\000\009\000\
\092\000\086\000\083\000\010\000\119\000\120\000\121\000\193\000\
\122\000\084\000\085\000\123\000\124\000\064\000\064\000\064\000\
\125\000\064\000\126\000\086\000\127\000\180\000\128\000\129\000\
\132\000\130\000\131\000\087\000\217\000\027\000\118\000\192\000\
\087\000\178\000\198\000\003\000\200\000\047\000\115\000\179\000\
\204\000\183\000\005\000\184\000\185\000\188\000\006\000\007\000\
\214\000\186\000\087\000\189\000\190\000\023\000\172\000\209\000\
\008\000\218\000\191\000\196\000\226\000\064\000\064\000\064\000\
\197\000\056\000\240\000\227\000\203\000\244\000\083\000\205\000\
\083\000\207\000\048\000\174\000\216\000\084\000\085\000\237\000\
\224\000\238\000\225\000\230\000\232\000\234\000\243\000\086\000\
\236\000\242\000\022\000\054\000\055\000\025\000\026\000\027\000\
\028\000\029\000\143\000\249\000\052\000\246\000\250\000\252\000\
\251\000\253\000\000\001\141\000\255\000\002\000\055\000\227\000\
\014\000\064\000\241\000\118\000\021\000\049\000\087\000\102\000\
\080\000\104\000\104\000\104\000\104\000\002\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\117\000\
\015\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\002\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\046\000\104\000\048\000\081\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\090\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\043\000\215\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\254\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\001\001\106\000\206\000\231\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\000\000\106\000\000\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\029\000\
\000\000\029\000\029\000\113\000\000\000\113\000\029\000\113\000\
\113\000\113\000\029\000\029\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\029\000\052\000\000\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\027\000\000\000\029\000\029\000\000\000\029\000\000\000\
\029\000\113\000\113\000\113\000\000\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\023\000\000\000\
\000\000\023\000\000\000\000\000\000\000\023\000\027\000\027\000\
\027\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\023\000\
\000\000\000\000\023\000\023\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\021\000\000\000\021\000\
\021\000\000\000\000\000\000\000\021\000\003\000\000\000\004\000\
\021\000\021\000\000\000\000\000\005\000\003\000\000\000\047\000\
\006\000\007\000\021\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\000\000\
\000\000\021\000\021\000\000\000\021\000\074\000\021\000\047\000\
\000\000\000\000\000\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\043\000\
\000\000\043\000\043\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\043\000\043\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\024\000\
\043\000\000\000\000\000\043\000\043\000\000\000\043\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\052\000\000\000\
\052\000\052\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\052\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\052\000\
\000\000\000\000\052\000\052\000\000\000\052\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\008\000\000\000\008\000\
\008\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\008\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\008\000\000\000\
\008\000\008\000\008\000\008\000\008\000\000\000\008\000\000\000\
\000\000\008\000\008\000\000\000\008\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\011\000\000\000\011\000\011\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\011\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\000\000\000\000\
\011\000\011\000\000\000\011\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\017\000\000\000\017\000\017\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\017\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\017\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\000\000\000\000\017\000\
\017\000\000\000\017\000\024\000\017\000\000\000\000\000\024\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\049\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\000\000\070\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\000\000\000\000\024\000\024\000\000\000\024\000\
\000\000\024\000\000\000\000\000\000\000\024\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\116\000\
\000\000\003\000\000\000\004\000\053\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\134\000\136\000\000\000\138\000\139\000\000\000\000\000\
\000\000\000\000\116\000\142\000\012\000\013\000\014\000\015\000\
\016\000\000\000\017\000\000\000\000\000\018\000\019\000\000\000\
\020\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\022\000\054\000\055\000\025\000\026\000\027\000\028\000\029\000\
\000\000\003\000\000\000\004\000\220\000\000\000\116\000\000\000\
\005\000\000\000\169\000\170\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\000\000\000\008\000\000\000\
\000\000\182\000\000\000\000\000\000\000\000\000\000\000\187\000\
\000\000\000\000\000\000\000\000\012\000\013\000\014\000\015\000\
\016\000\000\000\017\000\000\000\000\000\018\000\019\000\000\000\
\020\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\199\000\000\000\201\000\202\000\093\000\094\000\
\095\000\096\000\097\000\000\000\116\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\000\000\000\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\000\000\
\003\000\000\000\004\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\006\000\007\000\003\000\140\000\047\000\
\000\000\239\000\000\000\000\000\005\000\008\000\000\000\000\000\
\006\000\007\000\000\000\000\000\245\000\000\000\000\000\000\000\
\116\000\248\000\008\000\012\000\013\000\014\000\015\000\016\000\
\000\000\017\000\000\000\000\000\018\000\019\000\000\000\020\000\
\002\001\021\000\000\000\000\000\048\000\000\000\000\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\000\000\000\000\000\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\003\000\208\000\047\000\000\000\
\000\000\000\000\000\000\005\000\003\000\000\000\047\000\006\000\
\007\000\000\000\000\000\005\000\003\000\000\000\047\000\006\000\
\007\000\008\000\000\000\005\000\000\000\000\000\000\000\006\000\
\007\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\086\000\086\000\000\000\000\000\086\000\
\000\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\000\000\000\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\112\000\000\000\086\000\112\000\112\000\086\000\
\112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\000\000\000\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\108\000\112\000\112\000\108\000\
\108\000\000\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\000\000\000\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\000\000\108\000\
\108\000\063\000\063\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\000\000\000\000\000\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\063\000\062\000\062\000\062\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\000\000\000\000\000\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\062\000\062\000\060\000\
\060\000\060\000\000\000\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\000\000\000\000\000\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\060\000\060\000\059\000\059\000\059\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\059\000\059\000\061\000\061\000\061\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\061\000\061\000\061\000\
\063\000\063\000\063\000\063\000\063\000\000\000\000\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\
\000\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\063\000"

let yycheck = "\003\000\
\000\000\000\000\032\000\005\000\006\000\007\000\008\000\004\000\
\004\000\016\000\121\000\016\000\001\001\003\001\001\001\003\001\
\018\000\001\000\005\001\196\000\001\001\062\001\003\001\005\001\
\062\001\012\001\013\001\008\001\050\001\057\001\052\001\012\001\
\013\001\002\001\024\001\022\001\002\001\003\001\004\001\216\000\
\006\001\022\001\056\001\048\000\050\001\072\000\042\000\001\001\
\062\001\063\001\047\000\001\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\047\001\042\001\002\001\000\000\
\045\001\046\001\053\001\048\001\001\001\050\001\074\000\053\001\
\074\000\062\001\062\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\052\001\050\001\082\000\052\001\114\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\057\001\058\001\050\001\001\001\
\052\001\043\001\044\001\005\001\001\001\121\000\189\000\190\000\
\005\001\118\000\012\001\013\001\000\000\127\000\000\000\012\001\
\013\001\240\000\035\001\002\001\022\001\004\001\001\001\033\001\
\050\001\022\001\005\001\034\001\002\001\002\001\052\001\173\000\
\051\001\012\001\013\001\051\001\004\001\002\001\003\001\004\001\
\004\001\006\001\004\001\022\001\001\001\047\001\026\001\050\001\
\041\001\050\001\050\001\053\001\194\000\000\000\052\001\052\001\
\053\001\051\001\177\000\001\001\179\000\003\001\004\001\002\001\
\183\000\002\001\008\001\002\001\002\001\001\001\012\001\013\001\
\191\000\006\001\053\001\052\001\052\001\000\000\192\000\188\000\
\022\001\195\000\002\001\054\001\203\000\050\001\051\001\052\001\
\003\001\197\000\001\001\205\000\002\001\235\000\005\001\003\001\
\005\001\002\001\040\001\062\001\004\001\012\001\013\001\222\000\
\002\001\224\000\050\001\053\001\002\001\004\001\229\000\022\001\
\001\001\004\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\001\001\054\001\240\000\002\001\004\001\246\000\
\002\001\002\001\049\001\240\000\251\000\000\000\004\001\249\000\
\002\001\051\001\049\001\004\001\000\000\003\001\053\001\002\001\
\037\000\001\001\002\001\003\001\004\001\004\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\004\001\
\002\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\004\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\004\001\042\001\003\001\038\000\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\041\000\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\000\000\192\000\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\249\000\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\000\042\001\186\000\207\000\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\054\001\255\255\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\001\001\
\255\255\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\000\000\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\004\001\255\255\045\001\046\001\255\255\048\001\255\255\
\050\001\051\001\052\001\053\001\255\255\255\255\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\001\001\255\255\
\255\255\004\001\255\255\255\255\255\255\008\001\033\001\034\001\
\035\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\046\001\255\255\048\001\255\255\050\001\
\255\255\255\255\255\255\054\001\255\255\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\001\001\255\255\003\001\
\004\001\255\255\255\255\255\255\008\001\001\001\255\255\003\001\
\012\001\013\001\255\255\255\255\008\001\001\001\255\255\003\001\
\012\001\013\001\022\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\046\001\255\255\048\001\001\001\050\001\003\001\
\255\255\255\255\255\255\255\255\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\004\001\255\255\255\255\255\255\008\001\255\255\
\255\255\255\255\012\001\013\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\000\000\
\042\001\255\255\255\255\045\001\046\001\255\255\048\001\255\255\
\050\001\255\255\255\255\255\255\255\255\255\255\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\001\001\255\255\
\003\001\004\001\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\046\001\255\255\048\001\255\255\050\001\
\255\255\255\255\255\255\255\255\255\255\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\001\001\255\255\003\001\
\004\001\255\255\255\255\255\255\008\001\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\046\001\255\255\048\001\255\255\050\001\255\255\
\255\255\255\255\255\255\255\255\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\001\001\255\255\003\001\004\001\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\042\001\255\255\255\255\
\045\001\046\001\255\255\048\001\255\255\050\001\255\255\255\255\
\255\255\255\255\255\255\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\001\001\255\255\003\001\004\001\255\255\
\255\255\255\255\008\001\255\255\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\046\001\255\255\048\001\004\001\050\001\255\255\255\255\008\001\
\255\255\255\255\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\255\255\003\000\004\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\012\000\013\000\255\255\015\000\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\042\001\255\255\255\255\045\001\046\001\255\255\048\001\
\255\255\050\001\255\255\255\255\255\255\054\001\255\255\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\047\000\
\255\255\001\001\255\255\003\001\004\001\255\255\255\255\255\255\
\008\001\255\255\255\255\255\255\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\073\000\074\000\255\255\076\000\077\000\255\255\255\255\
\255\255\255\255\082\000\083\000\036\001\037\001\038\001\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\046\001\255\255\
\048\001\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\255\255\001\001\255\255\003\001\004\001\255\255\118\000\255\255\
\008\001\255\255\122\000\123\000\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\132\000\255\255\022\001\255\255\
\255\255\137\000\255\255\255\255\255\255\255\255\255\255\143\000\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\046\001\255\255\
\048\001\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\255\255\255\255\178\000\255\255\180\000\181\000\007\001\008\001\
\009\001\010\001\011\001\255\255\188\000\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\001\001\255\255\003\001\255\255\255\255\255\255\255\255\008\001\
\255\255\255\255\255\255\012\001\013\001\001\001\002\001\003\001\
\255\255\225\000\255\255\255\255\008\001\022\001\255\255\255\255\
\012\001\013\001\255\255\255\255\236\000\255\255\255\255\255\255\
\240\000\241\000\022\001\036\001\037\001\038\001\039\001\040\001\
\255\255\042\001\255\255\255\255\045\001\046\001\255\255\048\001\
\000\001\050\001\255\255\255\255\040\001\255\255\255\255\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\255\255\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\001\001\255\255\003\001\012\001\
\013\001\255\255\255\255\008\001\001\001\255\255\003\001\012\001\
\013\001\022\001\255\255\008\001\255\255\255\255\255\255\012\001\
\013\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\001\001\002\001\255\255\255\255\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\001\001\255\255\050\001\004\001\005\001\053\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\001\001\052\001\053\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\053\001\002\001\003\001\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\052\001\002\001\003\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\002\001\
\003\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\051\001\052\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\052\001\002\001\003\001\004\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\050\001\051\001\052\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\052\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  INCREMENT\000\
  DECREMENT\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQ\000\
  NEQ\000\
  AND\000\
  OR\000\
  FORCE\000\
  QUEST\000\
  OF\000\
  IS\000\
  ASSIGN\000\
  PLUSASSIGN\000\
  MINUSASSIGN\000\
  TIMESASSIGN\000\
  DIVIDEASSIGN\000\
  MODASSIGN\000\
  FORCEASSIGN\000\
  FUN\000\
  TYPE\000\
  IMPORT\000\
  PRINT\000\
  RAISE\000\
  BREAK\000\
  RETURN\000\
  TRY\000\
  CATCH\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  IN\000\
  MATCH\000\
  WHEN\000\
  SEMI\000\
  COLON\000\
  COMMA\000\
  PERIOD\000\
  VERT\000\
  NEWLINE\000\
  UNDER\000\
  EOF\000\
  "

let yynames_block = "\
  STRING\000\
  INT\000\
  DOUBLE\000\
  CHAR\000\
  BOOL\000\
  ID\000\
  OPTID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parts) in
    Obj.repr(
# 49 "parser.mly"
            (Program(_1))
# 810 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                     ([])
# 816 "parser.ml"
               : 'parts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'part) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parts) in
    Obj.repr(
# 53 "parser.mly"
               (_1 :: _2)
# 824 "parser.ml"
               : 'parts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'imports) in
    Obj.repr(
# 56 "parser.mly"
          (Imports(_1))
# 831 "parser.ml"
               : 'part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fxns) in
    Obj.repr(
# 57 "parser.mly"
         (Fxns(_1))
# 838 "parser.ml"
               : 'part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 58 "parser.mly"
         (Typs(_1))
# 845 "parser.ml"
               : 'part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 59 "parser.mly"
          (Stmts(_1))
# 852 "parser.ml"
               : 'part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'import) in
    Obj.repr(
# 62 "parser.mly"
                       ([_1])
# 859 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'imports) in
    Obj.repr(
# 63 "parser.mly"
                   (_1 :: _2)
# 867 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
               (ImportDeclarator(_2))
# 874 "parser.ml"
               : 'import))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fxn) in
    Obj.repr(
# 69 "parser.mly"
                    ([_1])
# 881 "parser.ml"
               : 'fxns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fxn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fxns) in
    Obj.repr(
# 70 "parser.mly"
             (_1 :: _2)
# 889 "parser.ml"
               : 'fxns))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 73 "parser.mly"
                                    (
    FxnDeclarator({
      name = _2;
      params = _4;
      body = _6;
    })
  )
# 904 "parser.ml"
               : 'fxn))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
       ([])
# 910 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 83 "parser.mly"
             ([_1])
# 917 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 84 "parser.mly"
                           (_1::_3)
# 925 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 87 "parser.mly"
                    ([_1])
# 932 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 88 "parser.mly"
             (_1 :: _2)
# 940 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'parts) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'sub_typs) in
    Obj.repr(
# 91 "parser.mly"
                                              (
    TypeDeclarator(Type({
      name = _2;
      global_body = _5;
      sub_typs = _7;
    }))
  )
# 955 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sub_typs) in
    Obj.repr(
# 98 "parser.mly"
                            (
    TypeDeclarator(TypeNoGlobal({
      name = _2;
      sub_typs = _4;
    }))
  )
# 968 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_typ) in
    Obj.repr(
# 106 "parser.mly"
          ([_1])
# 975 "parser.ml"
               : 'sub_typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sub_typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_typs) in
    Obj.repr(
# 107 "parser.mly"
                          (_1 :: _3)
# 983 "parser.ml"
               : 'sub_typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                   (Enum(_1))
# 990 "parser.ml"
               : 'sub_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 111 "parser.mly"
                    (EnumType(_1,_3))
# 998 "parser.ml"
               : 'sub_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'parts) in
    Obj.repr(
# 112 "parser.mly"
                           (NoInherit(_1, _3))
# 1006 "parser.ml"
               : 'sub_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'post_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'parts) in
    Obj.repr(
# 113 "parser.mly"
                                        (Inherit(_1,_3,_5))
# 1015 "parser.ml"
               : 'sub_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 116 "parser.mly"
                     ([_1])
# 1022 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 117 "parser.mly"
               (_1 :: _2)
# 1030 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                              (Block([]))
# 1036 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 121 "parser.mly"
                        (Block(_2))
# 1043 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
            (Expr(_1))
# 1050 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 125 "parser.mly"
                        (_1)
# 1057 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                    (Print(_2))
# 1064 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     (Return(_2))
# 1071 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                   (Raise(_2))
# 1078 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
               (Break)
# 1084 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 131 "parser.mly"
                                   (Conditional(While(_3, _5)))
# 1092 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 132 "parser.mly"
                                                     (Conditional(For(_3, _5, _7, _9)))
# 1102 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'post_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 133 "parser.mly"
                                              (Conditional(ForIn(_3, _5, _7)))
# 1111 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'post_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 134 "parser.mly"
                                       (Conditional(ForIn(_2, _4, _6)))
# 1120 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'match_conditions) in
    Obj.repr(
# 135 "parser.mly"
                                                           (Conditional(Match(_3, _6)))
# 1128 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'block) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 136 "parser.mly"
                               (Conditional(Try(_2, _4, _5)))
# 1137 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 137 "parser.mly"
                                             (Conditional(If(_3, _5, Else(Empty))))
# 1145 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_stmt) in
    Obj.repr(
# 138 "parser.mly"
                                          (Conditional(If(_3, _5, _6)))
# 1154 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
         (Empty)
# 1160 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'match_condition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 142 "parser.mly"
                        ([(_1, _2)])
# 1168 "parser.ml"
               : 'match_conditions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'match_condition) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'match_conditions) in
    Obj.repr(
# 143 "parser.mly"
                                                ((_1, _2) :: _4)
# 1177 "parser.ml"
               : 'match_conditions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_typs) in
    Obj.repr(
# 146 "parser.mly"
                                   (MatchConditional(_1, _3))
# 1185 "parser.ml"
               : 'match_condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 147 "parser.mly"
              (MatchConditional(_1, []))
# 1192 "parser.ml"
               : 'match_condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_typs) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                                               (WhenMatchConditional(_1, _3, _6))
# 1201 "parser.ml"
               : 'match_condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                        (WhenMatchConditional(_1, [], _3))
# 1209 "parser.ml"
               : 'match_condition))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 152 "parser.mly"
                                             (ElIf(If(_3, _5, Else(Empty))))
# 1217 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_stmt) in
    Obj.repr(
# 153 "parser.mly"
                                            (ElIf(If(_3, _5, _6)))
# 1226 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 154 "parser.mly"
               (Else(_2))
# 1233 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                     ([_1])
# 1240 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 158 "parser.mly"
                     (_1 :: _3)
# 1248 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pre_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bin_exprs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                                    (TryPrefix(_2, _3, _5))
# 1257 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pre_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bin_exprs) in
    Obj.repr(
# 162 "parser.mly"
                       (Prefix(_1, _2))
# 1265 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 165 "parser.mly"
                                         (PrefixOp(PreDecrement, _2))
# 1272 "parser.ml"
               : 'pre_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 166 "parser.mly"
                                           (PrefixOp(PreIncrement, _2))
# 1279 "parser.ml"
               : 'pre_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 167 "parser.mly"
                                 (PrefixOp(Negate, _2))
# 1286 "parser.ml"
               : 'pre_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 168 "parser.mly"
                                 (PrefixOp(UMinus, _2))
# 1293 "parser.ml"
               : 'pre_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'post_expr) in
    Obj.repr(
# 169 "parser.mly"
              (Postfix(_1))
# 1300 "parser.ml"
               : 'pre_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "parser.mly"
        ([])
# 1306 "parser.ml"
               : 'bin_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bin_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bin_exprs) in
    Obj.repr(
# 173 "parser.mly"
                       (_1 :: _2)
# 1314 "parser.ml"
               : 'bin_exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 176 "parser.mly"
                (BinOp(Plus, _2))
# 1321 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 177 "parser.mly"
                   (BinOp(Minus, _2))
# 1328 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 178 "parser.mly"
                   (BinOp(Times, _2))
# 1335 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 179 "parser.mly"
                    (BinOp(Divide, _2))
# 1342 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 180 "parser.mly"
                 (BinOp(Mod, _2))
# 1349 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 181 "parser.mly"
                 (BinOp(And, _2))
# 1356 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 182 "parser.mly"
                (BinOp(Or, _2))
# 1363 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 183 "parser.mly"
                (BinOp(Less, _2))
# 1370 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 184 "parser.mly"
                (BinOp(Greater, _2))
# 1377 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 185 "parser.mly"
                 (BinOp(LessEqual, _2))
# 1384 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 186 "parser.mly"
                 (BinOp(GreaterEqual, _2))
# 1391 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 187 "parser.mly"
                (BinOp(Equal, _2))
# 1398 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 188 "parser.mly"
                 (BinOp(NotEqual, _2))
# 1405 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 189 "parser.mly"
                (Is(_2))
# 1412 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 191 "parser.mly"
                    (Assign(AEq, _2))
# 1419 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 192 "parser.mly"
                        (Assign(APlus, _2))
# 1426 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 193 "parser.mly"
                         (Assign(AMinus, _2))
# 1433 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 194 "parser.mly"
                         (Assign(ATimes, _2))
# 1440 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 195 "parser.mly"
                          (Assign(ADivide, _2))
# 1447 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pre_expr) in
    Obj.repr(
# 196 "parser.mly"
                       (Assign(AMod, _2))
# 1454 "parser.ml"
               : 'bin_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_typ) in
    Obj.repr(
# 199 "parser.mly"
                        (_1)
# 1461 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 200 "parser.mly"
            (Literal(_1))
# 1468 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_typs) in
    Obj.repr(
# 201 "parser.mly"
                          (TupleId(_2))
# 1475 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'post_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'brack_exprs) in
    Obj.repr(
# 202 "parser.mly"
                          (TableAccess(_1, _2))
# 1483 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'post_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_tuple_exprs) in
    Obj.repr(
# 203 "parser.mly"
                                (TupleAccess(_1, _2))
# 1491 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'post_expr) in
    Obj.repr(
# 204 "parser.mly"
                            (Call(_1, []))
# 1498 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 205 "parser.mly"
                                  (Call(_1, _3))
# 1506 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 206 "parser.mly"
                                      (TypeCall(_1, _3, []))
# 1514 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'post_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 207 "parser.mly"
                                            (TypeCall(_1, _3, _5))
# 1523 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'post_expr) in
    Obj.repr(
# 208 "parser.mly"
                        (PostfixOp(_1, PostIncrement))
# 1530 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'post_expr) in
    Obj.repr(
# 209 "parser.mly"
                        (PostfixOp(_1, PostDecrement))
# 1537 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'post_expr) in
    Obj.repr(
# 210 "parser.mly"
                    (PostfixOp(_1, Force))
# 1544 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 211 "parser.mly"
                       (Paran(_2))
# 1551 "parser.ml"
               : 'post_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 214 "parser.mly"
     (Id(_1))
# 1558 "parser.ml"
               : 'opt_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 215 "parser.mly"
          (OptId(_1))
# 1565 "parser.ml"
               : 'opt_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "parser.mly"
          (Discard)
# 1571 "parser.ml"
               : 'opt_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_typ) in
    Obj.repr(
# 219 "parser.mly"
                        ([_1; _3])
# 1579 "parser.ml"
               : 'opt_typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_typs) in
    Obj.repr(
# 220 "parser.mly"
                           (_1 :: _3)
# 1587 "parser.ml"
               : 'opt_typs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 223 "parser.mly"
                                  ([_2])
# 1594 "parser.ml"
               : 'brack_exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'brack_exprs) in
    Obj.repr(
# 224 "parser.mly"
                                  (_2 :: _4)
# 1602 "parser.ml"
               : 'brack_exprs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 227 "parser.mly"
                                          ([_3])
# 1609 "parser.ml"
               : 'paren_tuple_exprs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'paren_tuple_exprs) in
    Obj.repr(
# 228 "parser.mly"
                                                (_3 :: _5)
# 1617 "parser.ml"
               : 'paren_tuple_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 231 "parser.mly"
      (Int(_1))
# 1624 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 232 "parser.mly"
           (Double(_1))
# 1631 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 233 "parser.mly"
         (Char(_1))
# 1638 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 234 "parser.mly"
         (Bool(_1))
# 1645 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 235 "parser.mly"
           (String(_1))
# 1652 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "parser.mly"
                  (Table(EmptyTable))
# 1658 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 237 "parser.mly"
                        (Table(ArrayLiteral(_2)))
# 1665 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'key_val_exprs) in
    Obj.repr(
# 238 "parser.mly"
                                (Table(KeyValueLiteral(_2)))
# 1672 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 239 "parser.mly"
                        (Tuple(_2))
# 1679 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 242 "parser.mly"
                 ([(IntKey(_1), _3)])
# 1687 "parser.ml"
               : 'key_val_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 243 "parser.mly"
                      ([(StringKey(_1), _3)])
# 1695 "parser.ml"
               : 'key_val_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'key_val_exprs) in
    Obj.repr(
# 244 "parser.mly"
                                       ((IntKey(_1), _3) :: _5)
# 1704 "parser.ml"
               : 'key_val_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'key_val_exprs) in
    Obj.repr(
# 245 "parser.mly"
                                          ((StringKey(_1), _3) :: _5)
# 1713 "parser.ml"
               : 'key_val_exprs))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
